{"ts":1359558238032,"silentsave":true,"restoring":false,"patch":[[]],"length":0}
{"contributors":[],"silentsave":false,"ts":1359558879057,"patch":[[{"diffs":[[1,"using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Web;\n\nnamespace Shared\n{\n    public class PagerModel\n    {\n        public PagerModel()\n        {\n            PageIndex = 0;\n            PageSize = 10;\n            PageGroupSize = 10;\n            TotalRowCount = 0;\n        }\n\n        public int PageSize { get; set; }\n        public int PageIndex { get; set; }\n        public int TotalRowCount { get; set; }\n        public int PageGroupSize { get; set; }\n\n        public int PageNumber { get { return PageIndex + 1; } }\n\n        public int StartRowIndex { get { return Math.Max(0, PageIndex) * PageSize; } }\n        public int EndRowIndex { get { return Math.Max(0, Math.Min(StartRowIndex + PageSize, TotalRowCount - 1)); } }\n        public int StartRowNumber { get { return StartRowIndex + 1; } }\n        public int EndRowNumber { get { return EndRowIndex + 1; } }\n\n        public int PageCount { get { return (TotalRowCount == 0 || PageSize == 0) ? 0 : (int)Math.Ceiling((decimal)TotalRowCount / (decimal)PageSize); } }\n        public bool IsFirstPage { get { return PageCount > 0 && PageIndex == 0; } }\n        public bool IsLastPage { get { return PageIndex == PageCount - 1; } }\n\n        public int PageGroupCount { get { return (PageCount == 0 || PageGroupSize == 0) ? 0 : (int)Math.Ceiling((decimal)PageCount / (decimal)PageGroupSize); } }\n        public int PageGroupPageCount { get { return Math.Min(PageGroupSize, PageCount - (PageGroupIndex * PageGroupSize)); } }\n        public int PageGroupIndex { get { return (PageIndex == 0 || PageGroupSize == 0) ? 0 : (int)Math.Floor((decimal)PageIndex / (decimal)PageGroupSize); } }\n        public bool IsFirstPageGroup { get { return PageGroupCount > 0 && PageGroupIndex == 0; } }\n        public bool IsLastPageGroup { get { return PageGroupIndex == PageGroupCount - 1; } }\n        public IEnumerable<int> PageIndices\n        {\n            get\n            {\n                var pageIndices = new List<int>();\n                var startingPageIndex = PageGroupIndex * PageGroupSize;\n                for (var i = 0; i < PageGroupPageCount; i++)\n                    pageIndices.Add(startingPageIndex + i);\n                return pageIndices;\n            }\n        }\n        public IEnumerable<int> PageNumbers { get { return PageIndices.Select(p => p + 1).ToList(); } }\n    }\n}"]],"start1":0,"start2":0,"length1":0,"length2":2355}]],"length":2355,"saved":false}
