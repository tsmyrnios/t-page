{"ts":1359559079940,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"t-page\n======\n\nAn ASP.Net MVC pager that never thought it'd be on a boat"]],"start1":0,"start2":0,"length1":0,"length2":72}]],"length":72}
{"contributors":[],"silentsave":false,"ts":1359560490919,"patch":[[{"diffs":[[1,"#"],[0,"t-page"],[-1,"\n======"],[0,"\n\nAn"]],"start1":0,"start2":0,"length1":17,"length2":11},{"diffs":[[0,"Net MVC "],[1,"Razor "],[0,"pager th"]],"start1":16,"start2":16,"length1":16,"length2":22},{"diffs":[[0,"n a boat"],[1,".\n\n###Usage\n\n- PagerModel.cs: Move this to your Models folder\n- PagerModel.cshtml: Move this to your Shared\\EditorTemplates folder (create if it doesn't exist)\n- pager.js: include this in the project (usually a scripts folder) and ensure this gets added as a script in your HTML on the Views where the pager will display\n\n*The View*\n\nPut the \"EditorFor\" inside a form:\n\n    @model PostListModel\n\n    @using(var form = Html.BeginForm()){\n        @Html.EditorFor(m => m.Pager)\n    }\n\n*The Model*\n\nAdd a Pager property to the model used by the view\n\n    // Post listing with pager\n    public class PostListModel\n    {\n        public IEnumerable<PostModel> Posts { get; set; }\n        ...\n        public PagerModel Pager { get; set; }\n    }\n\n*The Controller*\n\n###Tribute\n\nThis repo pays homage to the works of Adam Sandberg."]],"start1":64,"start2":64,"length1":8,"length2":828}]],"length":892,"saved":false}
{"ts":1359561206013,"patch":[[{"diffs":[[0,"torFor\" "],[-1,""],[0,""],[1,"for the pager "],[0,"inside a"]],"start1":418,"start2":418,"length1":16,"length2":30},{"diffs":[[0,"stModel\n"],[-1,""],[0,""],[1,"    ..."],[0,"\n    @us"]],"start1":473,"start2":473,"length1":16,"length2":23},{"diffs":[[0,"lic "],[-1,"IEnumerable<PostModel> Posts { get; set; }\n        ...\n        public PagerModel Pager { get; set; }\n    }\n\n*The Controller*"],[1,"PostListModel()\n        {\n            Posts = new List<PostModel>();\n            ...\n            Pager = new PagerModel();\n        }\n    \n        public IEnumerable<PostModel> Posts { get; set; }\n        ...\n        public PagerModel Pager { get; set; }\n    }\n\n*The Controller*\n\nYou can simply pass the Model used by the view as an argument to the action and the Pager property will be bound automatically\n\n    public class PostController : Controller\n    {\n        ...\n        \n        public ActionResult List(PostListModel model)\n        {\n            // get data based on pager properties\n            // - model.StartRowIndex\n            // - model.PageSize\n            \n            // set the total row count after data has been retrieved\n            // - model.TotalRowCount\n            ...\n            return View(model);\n        }\n    }"],[0,"\n\n##"]],"start1":719,"start2":719,"length1":132,"length2":852}]],"length":1633,"saved":false}
{"contributors":[],"silentsave":false,"ts":1359562332815,"patch":[[{"diffs":[[0," }\n    }"],[1,"\n    \n###Future\n\nA Nuget package is in the works for this... for now, just copy in the code."],[0,"\n\n###Tri"]],"start1":1559,"start2":1559,"length1":16,"length2":108}]],"length":1725,"saved":false}
{"contributors":[],"silentsave":false,"ts":1359568615012,"patch":[[{"diffs":[[0,"- model."],[1,"Pager."],[0,"StartRow"]],"start1":1331,"start2":1331,"length1":16,"length2":22},{"diffs":[[0," // - model."],[1,"Pager."],[0,"PageSize\n   "]],"start1":1370,"start2":1370,"length1":24,"length2":30},{"diffs":[[0,"- model."],[1,"Pager."],[0,"TotalRow"]],"start1":1494,"start2":1494,"length1":16,"length2":22}]],"length":1743,"saved":false}
